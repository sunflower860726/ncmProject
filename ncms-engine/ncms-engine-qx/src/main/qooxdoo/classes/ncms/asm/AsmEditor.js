/**
 * Assembly instance editor.
 *
 *
 *
 * Sample assembly spec generated by: com.softmotions.ncms.asm.AsmRS
 *
 *            {
 *                "id" : 3,
 *                "name" : "pub.content",
 *                "type" : null,
 *                "description" : null,
 *                "options" : null,
 *                "parentRefs" : ["2:pub.main"],
 *                "core" : null,
 *                "published" : 0,
 *                "template" : 0,
 *                "effectiveCore" : {
 *                    "id" : 1,
 *                    "location" : "foo/bar",
 *                    "name" : "fobarcore",
 *                    "templateEngine" : null
 *                },
 *                "effectiveAttributes" : [
 *                    {
 *                        "asmId" : 1,
 *                        "name" : "copyright",
 *                        "type" : "string",
 *                        "value" : "My company (c)",
 *                        "options" : null,
 *                        "hasLargeValue" : false
 *                    },
 *                    {
 *                        "asmId" : 1,
 *                        "name" : "title",
 *                        "type" : "string",
 *                        "value" : "Hello world",
 *                        "options" : null,
 *                        "hasLargeValue" : false
 *                    },
 *                    {
 *                        "asmId" : 3,
 *                        "name" : "content",
 *                        "type" : "string",
 *                        "value" : "Simple text",
 *                        "options" : null,
 *                        "hasLargeValue" : false
 *                    }
 *                ]
 *            }
 *
 * @asset(ncms/icon/16/actions/core_link.png)
 */
qx.Class.define("ncms.asm.AsmEditor", {
    extend: qx.ui.container.Scroll,

    statics: {},

    events: {},

    properties: {

        /**
         * Assembly ID to load in editor
         */
        "asmId": {
            apply: "__applyAsmId",
            nullable: true,
            check: "Number"
        },

        /**
         * Set assembly JSON representation
         * of com.softmotions.ncms.asm.Asm
         */
        "asmSpec": {
            apply: "__applyAsmSpec",
            nullable: true,
            check: "Object"
        }
    },

    construct: function () {
        this.base(arguments);

        var form = this.__form = new sm.ui.form.ExtendedForm();
        var vmgr = form.getValidationManager();
        vmgr.setRequiredFieldMessage(this.tr("This field is required"));

        var el = new qx.ui.form.TextField().set({maxLength: 127});
        el.setReadOnly(true);
        form.add(el, this.tr("Name"), null, "name");

        el = new sm.ui.form.ButtonField(null, "ncms/icon/16/actions/core_link.png");
        el.setReadOnly(true);
        el.setShowResetButton(true);
        el.addListener("execute", this.__setCore, this);
        el.addListener("reset", this.__resetCore, this);
        form.add(el, this.tr("Core"), null, "core");

        el = new qx.ui.form.TextField().set({maxLength: 255});
        el.addListener("changeValue", this.__saveSimpleProps, this);
        form.add(el, this.tr("Description"), null, "description");

        el = new qx.ui.form.TextField().set({maxLength: 127});
        el.setPlaceholder(this.tr("Class name of an optional assembly controller"));
        el.addListener("changeValue", this.__saveSimpleProps, this);
        form.add(el, this.tr("Controller"), null, "controller");

        el = new qx.ui.form.CheckBox();
        el.addListener("changeValue", this.__saveSimpleProps, this);
        form.add(el, this.tr("Published"), null, "published");

        var tg = el = new qx.ui.form.RadioButtonGroup(new qx.ui.layout.HBox(5));
        el.add(new qx.ui.form.RadioButton(this.tr("None")).set({model: "none"}));
        el.add(new qx.ui.form.RadioButton(this.tr("Page")).set({model: "page"}));
        el.add(new qx.ui.form.RadioButton(this.tr("News page")).set({model: "news"}));
        el.addListener("changeSelection", this.__saveSimpleProps, this);
        form.add(el, this.tr("Template"), null, "templateMode");

        var rf = el = new qx.ui.form.TextField().set({maxLength: 255});
        el.setPlaceholder(this.tr("Comma separated list of roles used to access the assembly"));
        el.setEnabled(false);
        el.addListener("changeValue", this.__saveSimpleProps, this);
        form.add(el, this.tr("Roles"), null, "accessRoles");

        tg.addListener("changeSelection", function (ev) {
            var sel = ev.getData()[0];
            rf.setEnabled(sel != null && sel.getModel() !== "none");
        });

        el = new ncms.asm.AsmParentsTable();
        el.addListener("parentsChanged", function () {
            this.__reload("parents");
        }, this);
        form.add(el, this.tr("Parents"), null, "parents");

        el = new ncms.asm.AsmAttrsTable();
        el.addListener("attributesChanged", function () {
            this.__reload("attributes");
        }, this);
        form.add(el, this.tr("Attributes"), null, "attributes");

        var fr = new sm.ui.form.FlexFormRenderer(form);
        fr.setLastRowFlexible();
        fr.setAppearance("ncms-wsa-form");
        this.add(fr);
    },

    members: {

        __form: null,


        __applyProgress: false,


        __saveSimpleProps: function () {
            if (this.__applyProgress === true || !this.__form.validate()) {
                return;
            }
            var aspec = this.getAsmSpec();
            var data = {};
            this.__form.populateJSONObject(data, false, true);
            var req = ncms.Application.request("asms.props", aspec, "PUT");
            req.setRequestContentType("application/json");
            req.setData(JSON.stringify(data));
            data["id"] = aspec["id"];
            data["type"] = aspec["type"];
            req.send(function () {
                ncms.Events.getInstance().fireDataEvent("asmPropsChanged", data);
            });
        },

        __setCore: function () {
            var spec = this.getAsmSpec();
            var dlg = new ncms.mmgr.MediaSelectFileDlg(
                true,
                this.tr("Select core file for '%1' assembly", spec["name"] || ''));
            dlg.setCtypeAcceptor(ncms.Utils.isTextualContentType.bind(ncms.Utils));
            dlg.addListener("completed", function (ev) {
                var fspec = ev.getData()[0];
                var url = ncms.Application.ACT.getRestUrl("asms.core", spec);
                var req = new sm.io.Request(url, "PUT", "application/json");
                req.setRequestContentType("application/json");
                req.setData(JSON.stringify({
                    location: fspec["folder"] + fspec["name"]
                }));
                req.send(function (resp) {
                    var specPart = resp.getContent();
                    qx.lang.Object.mergeWith(spec, specPart, true);
                    dlg.close();
                    //clone needed to force execution of __applyAsmSpec
                    this.setAsmSpec(sm.lang.Object.shallowClone(spec));
                }, this);
            }, this);
            dlg.show();
        },


        __resetCore: function () {
            ncms.Application.confirm(this.tr("Are you sure to remove local assembly core?"), function (ok) {
                if (!ok) {
                    return;
                }
                var spec = this.getAsmSpec();
                var url = ncms.Application.ACT.getRestUrl("asms.core", spec);
                var req = new sm.io.Request(url, "DELETE", "application/json");
                req.send(function (resp) {
                    var specPart = resp.getContent();
                    qx.lang.Object.mergeWith(spec, specPart, true);
                    //clone needed to force execution of __applyAsmSpec
                    this.setAsmSpec(sm.lang.Object.shallowClone(spec));
                }, this);
            }, this);
        },

        __applyAsmId: function (value, old) {
            if (value == null) {
                this.setAsmSpec(null);
                return;
            }
            this.__reload();
        },

        __applyAsmSpec: function (spec) {
            this.__applyProgress = true;
            try {
                if (spec == null) {
                    this.__form.reset();
                    return;
                }
                var ctls = this.__form.getItems();
                if (spec._part == null) {
                    ctls["name"].setValue(spec["name"]);
                    ctls["description"].setValue(spec["description"]);
                    ctls["published"].setValue(!!spec["published"]);
                    ctls["templateMode"].setModelSelection([spec["templateMode"] || "none"]);
                    if (!Array.isArray(spec["accessRoles"])) {
                        ctls["accessRoles"].resetValue();
                    } else {
                        ctls["accessRoles"].setValue(spec["accessRoles"].join(", "));
                    }
                    if (!sm.lang.String.isEmpty(spec["effectiveController"]) &&
                        sm.lang.String.isEmpty(spec["controller"])) {
                        ctls["controller"].setPlaceholder(spec["effectiveController"]);
                    }
                    if (sm.lang.String.isEmpty(spec["controller"])) {
                        ctls["controller"].resetValue();
                        if (!sm.lang.String.isEmpty(spec["effectiveController"])) {
                            ctls["controller"].setPlaceholder(spec["effectiveController"]);
                        } else {
                            ctls["controller"].setPlaceholder(this.tr("Class name of an optional assembly controller"));
                        }
                    } else {
                        ctls["controller"].setValue(spec["controller"]);
                    }
                }
                if (spec["effectiveCore"] != null) {
                    var ecore = spec["effectiveCore"];
                    var ecoreVal = ecore["location"];
                    ctls["core"].setValue(ecoreVal);
                } else {
                    ctls["core"].setValue(null);
                }
                ctls["core"].setShowResetButton(spec["core"] != null);
                ctls["parents"].setAsmSpec(spec);
                ctls["attributes"].setAsmSpec(spec);
            } catch (e) {
                throw e;
            } finally {
                this.__applyProgress = false;
            }
        },

        __reload: function (part) {
            var req = new sm.io.Request(
                ncms.Application.ACT.getRestUrl("asms", {id: this.getAsmId()}),
                "GET", "application/json");
            req.send(function (resp) {
                var asmSpec = resp.getContent();
                //Prevent overriding of non related form values in `__applyAsmSpec`
                //if we are loading the specific 'part' of data
                asmSpec._part = part;
                this.setAsmSpec(asmSpec);
                asmSpec._part = null;
            }, this);
        }
    },

    destruct: function () {
        this._disposeObjects("__form");
    }
});